# AI Chat Frontend CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'ai-chat-frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'ai-chat-frontend/**'
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö jobs
env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './ai-chat-frontend'

jobs:
  # =====================================
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  # =====================================
  quality-check:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
      
      - name: üîß Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit
      
      - name: üìù Run type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run type-check
      
      - name: üßπ Run linting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
      
      - name: üíÖ Check formatting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run format:check

  # =====================================
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  # =====================================
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
      
      - name: üîß Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit
      
      - name: üß™ Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:ci
      
      - name: üìä Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          files: ./coverage/lcov.info
          flags: frontend
          name: ai-chat-frontend
          fail_ci_if_error: false

  # =====================================
  # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  # =====================================
  build:
    name: üèóÔ∏è Build
    needs: [quality-check, test]
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
      
      - name: üîß Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit
      
      - name: üèóÔ∏è Build application (${{ matrix.environment }})
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ matrix.environment == 'production' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}
          VITE_WS_URL: ${{ matrix.environment == 'production' && secrets.PROD_WS_URL || secrets.STAGING_WS_URL }}
          VITE_APP_ENV: ${{ matrix.environment }}
      
      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.environment }}
          path: ${{ env.WORKING_DIRECTORY }}/dist/
          retention-days: 7
          compression-level: 6

  # =====================================
  # Docker —Å–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  # =====================================
  docker-build:
    name: üê≥ Docker Build
    needs: [quality-check, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: üîë Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/ai-chat-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =====================================
  # Deployment (—Ç–æ–ª—å–∫–æ –¥–ª—è main branch)
  # =====================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-ai-chat.vercel.app
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-staging
          path: ${{ env.WORKING_DIRECTORY }}/dist
      
      - name: üöÄ Deploy to Vercel (Staging)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
          vercel-args: '--prebuilt'
        env:
          VERCEL_PROJECT_SETTINGS: './vercel.staging.json'

  deploy-production:
    name: üéâ Deploy to Production
    needs: [build, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ai-chat.vercel.app
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-production
          path: ${{ env.WORKING_DIRECTORY }}/dist
      
      - name: üöÄ Deploy to Vercel (Production)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PRODUCTION_PROJECT_ID }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
          vercel-args: '--prebuilt --prod'
      
      - name: üìã Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ **Production Deployment**
            
            **Changes:** 
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            
            **Deployed to:** https://ai-chat.vercel.app
            
            **Docker Image:** `${{ secrets.DOCKERHUB_USERNAME }}/ai-chat-frontend:${{ github.ref_name }}-${{ github.sha }}`
          draft: false
          prerelease: false

  # =====================================
  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  # =====================================
  notify:
    name: üì¢ Notifications
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üìß Notify on Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üö® **AI Chat Frontend CI/CD Failed**
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            
            [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}