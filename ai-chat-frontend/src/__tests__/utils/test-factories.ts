/**
 * Test Data Factories
 * –§–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */

import {
  SUBSCRIPTION_PLANS,
  CHARACTER_CATEGORIES,
  PERSONALITY_TRAITS,
} from '../../constants';

// –¢–∏–ø—ã (—Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
export interface TestUser {
  id: string;
  email: string;
  username: string;
  displayName: string;
  avatar?: string;
  isEmailVerified: boolean;
  subscription: {
    plan: string;
    status: 'active' | 'canceled' | 'expired';
    expiresAt?: string;
  };
  createdAt: string;
  updatedAt: string;
}

export interface TestCharacter {
  id: string;
  name: string;
  displayName: string;
  description: string;
  avatar: string;
  category: string;
  personalityTraits: string[];
  isNSFW: boolean;
  isCustom: boolean;
  createdBy?: string;
  stats: {
    likes: number;
    chats: number;
    rating: number;
  };
  createdAt: string;
  updatedAt: string;
}

export interface TestMessage {
  id: string;
  conversationId: string;
  content: string;
  type: 'user' | 'character' | 'system';
  timestamp: string;
  isRead: boolean;
  metadata?: {
    characterId?: string;
    userId?: string;
    emotions?: string[];
  };
}

export interface TestConversation {
  id: string;
  userId: string;
  characterId: string;
  title: string;
  messages: TestMessage[];
  isActive: boolean;
  lastMessageAt: string;
  createdAt: string;
}

export interface TestSubscription {
  id: string;
  userId: string;
  plan: string;
  status: 'active' | 'canceled' | 'expired' | 'pending';
  currentPeriodStart: string;
  currentPeriodEnd: string;
  cancelAtPeriodEnd: boolean;
  stripePriceId?: string;
  stripeSubscriptionId?: string;
  createdAt: string;
  updatedAt: string;
}

// ===========================================
// Utility Functions
// ===========================================

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
 */
function generateId(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã
 */
function randomDate(start?: Date, end?: Date): string {
  const startDate = start || new Date(2023, 0, 1);
  const endDate = end || new Date();
  const randomTime =
    startDate.getTime() +
    Math.random() * (endDate.getTime() - startDate.getTime());
  return new Date(randomTime).toISOString();
}

/**
 * –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
 */
function randomChoice<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

/**
 * –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function randomChoices<T>(array: T[], count: number = 1): T[] {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, Math.min(count, array.length));
}

// ===========================================
// User Factory
// ===========================================

export const createUser = (overrides: Partial<TestUser> = {}): TestUser => {
  const usernames = [
    'alice_wonder',
    'bob_builder',
    'charlie_coder',
    'diana_designer',
    'eve_engineer',
    'frank_frontend',
    'grace_graphics',
    'henry_hacker',
  ];
  const domains = [
    'gmail.com',
    'yahoo.com',
    'outlook.com',
    'proton.me',
    'icloud.com',
  ];

  const username = randomChoice(usernames);
  const domain = randomChoice(domains);
  const planKeys = Object.keys(SUBSCRIPTION_PLANS);

  const baseUser: TestUser = {
    id: generateId(),
    email: `${username}@${domain}`,
    username,
    displayName: username
      .replace('_', ' ')
      .replace(/\b\w/g, (l) => l.toUpperCase()),
    avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${username}`,
    isEmailVerified: Math.random() > 0.3,
    subscription: {
      plan: randomChoice(planKeys),
      status: randomChoice(['active', 'canceled', 'expired'] as const),
      expiresAt: randomDate(
        new Date(),
        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
      ),
    },
    createdAt: randomDate(new Date(2023, 0, 1), new Date()),
    updatedAt: randomDate(new Date(), new Date()),
  };

  return { ...baseUser, ...overrides };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export const createUsers = (
  count: number,
  overrides: Partial<TestUser> = {}
): TestUser[] => {
  return Array.from({ length: count }, () => createUser(overrides));
};

// ===========================================
// Character Factory
// ===========================================

export const createCharacter = (
  overrides: Partial<TestCharacter> = {}
): TestCharacter => {
  const names = [
    'Aria',
    'Luna',
    'Zara',
    'Nova',
    'Vera',
    'Maya',
    'Iris',
    'Sage',
    'Alex',
    'Jordan',
    'River',
    'Sky',
    'Phoenix',
    'Sage',
    'Blake',
    'Drew',
  ];

  const descriptions = [
    '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –±–æ–≥–∞—Ç—ã–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º',
    '–í–µ—Å–µ–ª—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –±–µ—Å–µ–¥',
    '–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º',
    '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ –º–∏—Ä',
    '–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –Ω–∞—Ç—É—Ä–∞, —Ü–µ–Ω—è—â–∞—è –∫—Ä–∞—Å–æ—Ç—É –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
    '–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä',
    '–î–æ–±—Ä—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –¥—Ä—É–≥, –≥–æ—Ç–æ–≤—ã–π –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ—á—å',
    '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª —Å —à–∏—Ä–æ–∫–∏–º –∫—Ä—É–≥–æ–∑–æ—Ä–æ–º –∏ –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏',
  ];

  const categoryKeys = Object.keys(CHARACTER_CATEGORIES);
  const traitKeys = Object.keys(PERSONALITY_TRAITS);
  const selectedCategory = randomChoice(categoryKeys);
  const category =
    CHARACTER_CATEGORIES[selectedCategory as keyof typeof CHARACTER_CATEGORIES];

  const name = randomChoice(names);
  const baseCharacter: TestCharacter = {
    id: generateId(),
    name: name.toLowerCase(),
    displayName: name,
    description: randomChoice(descriptions),
    avatar: `https://api.dicebear.com/7.x/personas/svg?seed=${name}`,
    category: selectedCategory,
    personalityTraits: randomChoices(
      traitKeys,
      Math.floor(Math.random() * 4) + 2
    ),
    isNSFW: category?.nsfw || false,
    isCustom: Math.random() > 0.7,
    createdBy: Math.random() > 0.5 ? generateId() : undefined,
    stats: {
      likes: Math.floor(Math.random() * 10000),
      chats: Math.floor(Math.random() * 5000),
      rating: Math.round((Math.random() * 2 + 3) * 10) / 10, // 3.0 - 5.0
    },
    createdAt: randomDate(new Date(2023, 0, 1), new Date()),
    updatedAt: randomDate(new Date(), new Date()),
  };

  return { ...baseCharacter, ...overrides };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */
export const createCharacters = (
  count: number,
  overrides: Partial<TestCharacter> = {}
): TestCharacter[] => {
  return Array.from({ length: count }, () => createCharacter(overrides));
};

// ===========================================
// Message Factory
// ===========================================

export const createMessage = (
  overrides: Partial<TestMessage> = {}
): TestMessage => {
  const userMessages = [
    '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
    '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ',
    '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?',
    '–ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?',
    '–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö?',
    '–ß—Ç–æ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è?',
    '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?',
    '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç!',
  ];

  const characterMessages = [
    '–ü—Ä–∏–≤–µ—Ç! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π ‚ú®',
    '–û, —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
    '–ó–Ω–∞–µ—à—å, —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...',
    '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–¥–∞–µ—à—å –æ—á–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!',
    '–•–æ—á–µ—à—å, –ø–æ–¥–µ–ª—é—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ–± —ç—Ç–æ–º?',
    '–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é...',
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥! –ê —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å?',
    '–°–æ–≥–ª–∞—Å–µ–Ω, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å ü§î',
  ];

  const systemMessages = [
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–µ—Å–µ–¥–µ',
    '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ',
    '–ë–µ—Å–µ–¥–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞',
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
  ];

  const messageType = randomChoice(['user', 'character', 'system'] as const);
  let content: string;

  switch (messageType) {
    case 'user':
      content = randomChoice(userMessages);
      break;
    case 'character':
      content = randomChoice(characterMessages);
      break;
    case 'system':
      content = randomChoice(systemMessages);
      break;
  }

  const baseMessage: TestMessage = {
    id: generateId(),
    conversationId: generateId(),
    content,
    type: messageType,
    timestamp: randomDate(
      new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
      new Date()
    ),
    isRead: Math.random() > 0.3,
    metadata: {
      characterId: messageType === 'character' ? generateId() : undefined,
      userId: messageType === 'user' ? generateId() : undefined,
      emotions:
        messageType === 'character'
          ? randomChoices(['happy', 'curious', 'thoughtful', 'excited'], 2)
          : undefined,
    },
  };

  return { ...baseMessage, ...overrides };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export const createMessages = (
  count: number,
  overrides: Partial<TestMessage> = {}
): TestMessage[] => {
  return Array.from({ length: count }, () => createMessage(overrides));
};

// ===========================================
// Conversation Factory
// ===========================================

export const createConversation = (
  overrides: Partial<TestConversation> = {}
): TestConversation => {
  const titles = [
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä',
    '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
    '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤',
    '–ü–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
    '–†–∞–∑–≥–æ–≤–æ—Ä –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
    '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–¥–µ–∏',
    '–î—Ä—É–∂–µ—Å–∫–∞—è –±–µ—Å–µ–¥–∞',
  ];

  const conversationId = generateId();
  const messageCount = Math.floor(Math.random() * 20) + 5; // 5-25 —Å–æ–æ–±—â–µ–Ω–∏–π

  const messages = Array.from({ length: messageCount }, (_, index) => {
    return createMessage({
      conversationId,
      type: index % 2 === 0 ? 'user' : 'character',
      timestamp: new Date(
        Date.now() - (messageCount - index) * 60 * 1000
      ).toISOString(),
    });
  });

  const baseConversation: TestConversation = {
    id: conversationId,
    userId: generateId(),
    characterId: generateId(),
    title: randomChoice(titles),
    messages,
    isActive: Math.random() > 0.3,
    lastMessageAt:
      messages[messages.length - 1]?.timestamp || new Date().toISOString(),
    createdAt: randomDate(
      new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      new Date()
    ),
  };

  return { ...baseConversation, ...overrides };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –±–µ—Å–µ–¥
 */
export const createConversations = (
  count: number,
  overrides: Partial<TestConversation> = {}
): TestConversation[] => {
  return Array.from({ length: count }, () => createConversation(overrides));
};

// ===========================================
// Subscription Factory
// ===========================================

export const createSubscription = (
  overrides: Partial<TestSubscription> = {}
): TestSubscription => {
  const planKeys = Object.keys(SUBSCRIPTION_PLANS);
  const plan = randomChoice(planKeys);
  const status = randomChoice([
    'active',
    'canceled',
    'expired',
    'pending',
  ] as const);

  const now = new Date();
  const periodStart = new Date(now.getTime() - 15 * 24 * 60 * 60 * 1000); // 15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
  const periodEnd = new Date(now.getTime() + 15 * 24 * 60 * 60 * 1000); // —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π

  const baseSubscription: TestSubscription = {
    id: generateId(),
    userId: generateId(),
    plan,
    status,
    currentPeriodStart: periodStart.toISOString(),
    currentPeriodEnd: periodEnd.toISOString(),
    cancelAtPeriodEnd: status === 'canceled' ? Math.random() > 0.5 : false,
    stripePriceId: `price_${generateId()}`,
    stripeSubscriptionId: `sub_${generateId()}`,
    createdAt: randomDate(new Date(2023, 0, 1), periodStart),
    updatedAt: randomDate(periodStart, new Date()),
  };

  return { ...baseSubscription, ...overrides };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export const createSubscriptions = (
  count: number,
  overrides: Partial<TestSubscription> = {}
): TestSubscription[] => {
  return Array.from({ length: count }, () => createSubscription(overrides));
};

// ===========================================
// Composite Factories
// ===========================================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –±–µ—Å–µ–¥–∞–º–∏
 */
export const createFullUser = (
  overrides: {
    user?: Partial<TestUser>;
    characterCount?: number;
    conversationCount?: number;
  } = {}
) => {
  const user = createUser(overrides.user);
  const characters = createCharacters(overrides.characterCount || 3, {
    createdBy: user.id,
  });
  const conversations = createConversations(overrides.conversationCount || 5, {
    userId: user.id,
  });
  const subscription = createSubscription({
    userId: user.id,
    plan: user.subscription.plan,
  });

  return {
    user,
    characters,
    conversations,
    subscription,
  };
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const createTestDataset = (
  options: {
    userCount?: number;
    characterCount?: number;
    conversationCount?: number;
    messageCount?: number;
  } = {}
) => {
  const {
    userCount = 10,
    characterCount = 50,
    conversationCount = 100,
    messageCount = 500,
  } = options;

  const users = createUsers(userCount);
  const characters = createCharacters(characterCount);
  const conversations = createConversations(conversationCount);
  const messages = createMessages(messageCount);
  const subscriptions = users.map((user) =>
    createSubscription({ userId: user.id })
  );

  return {
    users,
    characters,
    conversations,
    messages,
    subscriptions,
  };
};
